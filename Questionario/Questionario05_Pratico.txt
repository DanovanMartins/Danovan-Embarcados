Data: 23/03/2017

Para todas as questões, utilize as funções da norma POSIX (open(), close(), write(), read() e lseek()). Compile os códigos com o gcc e execute-os via terminal.

1. Crie um código em C para escrever "Ola mundo!" em um arquivo chamado 'ola_mundo.txt'.

#include <stdio.h>
#include <fcntl.h>
#include <unistd.h>
#include <stdlib.h>

int main(int argc, const char *argv[])
{
    int fp;
    char mensagem[100] = "Ola mundo";

    fp = open("ola_mundo.txt",O_WRONLY | O_CREAT, S_IRWXU);
    if (fp == -1){
        printf("Erro na criacao do arquivo");
        exit(1);
    }
    write(fp, &mensagem, sizeof(mensagem));
    close(fp);
    return 0;
}

2. Crie um código em C que pergunta ao usuário seu nome e sua idade, e escreve este conteúdo em um arquivo com o seu nome e extensão '.txt'. Por exemplo, considerando que o código criado recebeu o nome de 'ola_usuario_1':
	$ ./ola_usuario_1
	$ Digite o seu nome: Eu
	$ Digite a sua idade: 30
	$ cat Eu.txt
	$ Nome: Eu
	$ Idade: 30 anos
	$

#include <stdio.h>
#include <fcntl.h>
#include <unistd.h>
#include <stdlib.h>
#include <string.h>

int main(int argc, const char *argv[])
{
    int beta;

    char nome[30];
    char arquivo[30];
    char mensagem[30];
    int idade;

    printf("insira o seu nome: ");
    scanf("%s", &nome);
    printf("Insira a sua idade: ");
    scanf("%d", &idade);

    sprintf(arquivo,"%s.txt", nome);
    sprintf(mensagem, "Idade: %d Anos\0", idade);

    beta = open(arquivo, O_WRONLY | O_CREAT, S_IRWXU);

    if(beta == -1){
        printf("Erro ao criar o arquivo");
        exit(1);
    }
    write(beta, &mensagem, strlen(mensagem));
    close(beta);

    return 0;
}

3. Crie um código em C que recebe o nome do usuário e e sua idade como argumentos de entrada (usando as variáveis argc e *argv[]), e escreve este conteúdo em um arquivo com o seu nome e extensão '.txt'. Por exemplo, considerando que o código criado recebeu o nome de 'ola_usuario_2':
	$ ./ola_usuario_2 Eu 30
	$ cat Eu.txt
	$ Nome: Eu
	$ Idade: 30 anos
	$

#include <stdio.h>
#include <fcntl.h>
#include <unistd.h>
#include <stdlib.h>
#include <string.h>

int main(int argc, const char *argv[])
{

    int beta;
    char arquivo[30];
    char nome[30];
    char idade[30];

    sprintf(arquivo, "%s.txt", argv[1]);
    beta = open(arquivo, O_WRONLY | O_CREAT, S_IRWXU);
    if (beta == -1) {
        printf("Dolynho triste, arqivo nao foi aberto");
        exit(1);
    }
    sprintf(nome, "Nome: %s \n", argv[1]);
    sprintf(idade, "Idade: %s anos\n", argv[2]);

    write(beta, &nome, strlen(nome));
    write(beta, &idade, strlen(idade));
    close(beta);

    return 0;
}

4. Crie uma função que retorna o tamanho de um arquivo, usando o seguinte protótipo:

	int tam_arq_texto(char *nome_arquivo);

Salve esta função em um arquivo separado chamado 'bib_arqs.c'. Salve o protótipo em um arquivo chamado 'bib_arqs.h'. Compile 'bib_arqs.c' para gerar o objeto 'bib_arqs.o'.

main:

#include <stdio.h>
#include "bib_arqs.h"

int main(int argc, const char *argv[])
{
    printf("O arquivo possui %d bytes",tam_arq_texto("danovan.txt"));
    return 0;
}

bib_arqs.c:

#include <stdio.h>
#include <fcntl.h>
#include <unistd.h>
#include <stdlib.h>
#include <string.h>
#include "bib_arqs.h"


int tam_arq_texto(char *nome_arquivo){

    int i = 0;
    char c;

    int beta_leitura;
    beta_leitura = open(nome_arquivo, O_RDONLY | O_CREAT, S_IRWXU);

    if(beta_leitura == -1){
        printf("Dolynho modo Bolado, Erro ao abrir arquivo");
        exit(1);
    }

    while(read(beta_leitura, &c, 1) != 0)
         i++;
    close(beta_leitura);
    return i;
}

bib_arqs.h:

int tam_arq_texto(char *nome_arquivo);


5. Crie uma função que lê o conteúdo de um arquivo-texto e o guarda em uma string, usando o seguinte protótipo:

	void le_arq_texto(char *nome_arquivo, char *conteúdo);

Repare que o conteúdo do arquivo é armazenado no vetor 'conteudo[]'. Ou seja, ele é passado por referência. Salve esta função no mesmo arquivo da questão 4, chamado 'bib_arqs.c'. Salve o protótipo no arquivo 'bib_arqs.h'. Compile 'bib_arqs.c' novamente para gerar o objeto 'bib_arqs.o'.

main:

#include <stdio.h>
#include "bib_arqs.h"

int main(int argc, char *argv[])
{
    char mensagem[100];
    le_arq_texto("danovan.txt", mensagem);
    return 0;
}

bib_arqs.c:

#include <stdio.h>
#include <fcntl.h>
#include <unistd.h>
#include <stdlib.h>
#include <string.h>
#include "bib_arqs.h"


int tam_arq_texto(char *nome_arquivo){

    int i = 0;
    char c;

    int beta_leitura;
    beta_leitura = open(nome_arquivo, O_RDONLY | O_CREAT, S_IRWXU);

    if(beta_leitura == -1){
        printf("Dolynho modo Bolado, Erro ao abrir arquivo");
        exit(1);
    }

    while(read(beta_leitura, &c, 1) != 0)
         i++;
    close(beta_leitura);
    return i;
}

void le_arq_texto(char *nome_arquivo, char *conteudo){

    int i = 0;
    char c;

    int beta_leitura;
    beta_leitura = open(nome_arquivo, O_RDONLY | O_CREAT, S_IRWXU);

    if(beta_leitura == -1){
        printf("Erro ao realizar leitura, Dolynho encontra-se chateado");
    }

    while(read(beta_leitura, &c, 1) != 0){
        conteudo[i] = c;
        i++;
    }

    close(beta_leitura);
    printf("O arquivo possui o segunte texto: \n%s\n", conteudo);
}

bib_arqs.h:

int tam_arq_texto(char *nome_arquivo);
void le_arq_texto(char *nome_arquivo, char *conteudo);


6. Crie um código em C que copia a funcionalidade básica do comando 'cat': escrever o conteúdo de um arquivo-texto no terminal. Reaproveite as funções já criadas nas questões anteriores. Por exemplo, considerando que o código criado recebeu o nome de 'cat_falsificado':
	$ echo Ola mundo cruel! Ola universo ingrato! > ola.txt
	$ ./cat_falsificado ola.txt
	$ Ola mundo cruel! Ola universo ingrato!
	$

    main:

#include <stdio.h>
#include "bib_arqs.h"

int main(int argc, char *argv[])
{
    char conteudo[100];
    le_arq_texto(argv[1], conteudo); 
    return 0;
}

    bib_arqs_q6:

#include <stdio.h>
#include <fcntl.h>
#include <unistd.h>
#include <stdlib.h>
#include <string.h>
#include "bib_arqs.h"


void le_arq_texto(char *nome_arquivo, char *conteudo){

    int i = 0;
    char c;

    int beta_leitura;
    beta_leitura = open(nome_arquivo, O_RDONLY | O_CREAT, S_IRWXU);

    if(beta_leitura == -1){
        printf("Erro ao realizar leitura, Dolynho nao encontra Falsiane");
    }

    while(read(beta_leitura, &c, 1) != 0){
        conteudo[i] = c;
        i++;
    }

    close(beta_leitura);
    printf("%s\n", conteudo);
}

    bib_arqs.h:

void compara_palavras_arquivo(char *nome_arquivo, char *conteudo, char *palavra_chave);


7. Crie um código em C que conta a ocorrência de uma palavra-chave em um arquivo-texto, e escreve o resultado no terminal. Reaproveite as funções já criadas nas questões anteriores. Por exemplo, considerando que o código criado recebeu o nome de 'busca_e_conta':
	$ echo Ola mundo cruel! Ola universo ingrato! > ola.txt
	$ ./busca_e_conta Ola ola.txt
	$ 'Ola' ocorre 2 vezes no arquivo 'ola.txt'.
	$

    main:

#include <stdio.h>
#include "bib_arqs.h"

int main(int argc, char *argv[])
{
    char conteudo[100];
    compara_palavras_arquivo(argv[2], conteudo, argv[1]); 
    return 0;
}

    bib_arqs_q7v:

#include <stdio.h>
#include <fcntl.h>
#include <unistd.h>
#include <stdlib.h>
#include <string.h>
#include "bib_arqs.h"

void compara_palavras_arquivo(char *nome_arquivo, char *conteudo, char *palavra_chave){

    int i = 0, j = 0, k = 1;
    int contador = 0;
    int aux_j;
    int tamanho_palavra;
    int ocorrencias = 0;
    char var_aux, var_aux_maiuscula, var_aux_minuscula;
    char c;

    int beta_leitura;
    beta_leitura = open(nome_arquivo, O_RDONLY | O_CREAT, S_IRWXU);

    if(beta_leitura == -1){
        printf("Erro ao realizar leitura, Dolynho ja esta louco");
    }

    while(read(beta_leitura, &c, 1) != 0){
        conteudo[i] = c;
        i++;
    }

    tamanho_palavra = strlen(palavra_chave);
    var_aux = palavra_chave[0];
    var_aux_maiuscula = toupper(var_aux);
    var_aux_minuscula = tolower(var_aux);
    for (; j < i; j++) {

       if(j == 0)
             if(conteudo[j] == var_aux_maiuscula || conteudo[j] == var_aux_minuscula){
             aux_j = j+1;
             for (; aux_j < (j + tamanho_palavra); aux_j++) {
                if (palavra_chave[k] == conteudo[aux_j])
                    contador++;
                k++;
             }
             if(conteudo[aux_j] == ' ')
                contador++;
             if(contador == (tamanho_palavra))
                ocorrencias++;

             contador = 0;
             k = 1;
             }

       if(conteudo[j] == var_aux_maiuscula || conteudo[j] == var_aux_minuscula){
           aux_j = j+1;
           for (; aux_j < (j + tamanho_palavra); aux_j++) {
                if (palavra_chave[k] == conteudo[aux_j])
                    contador++;
                k++;
            }
            if(conteudo[aux_j] == ' ' && conteudo[j-1] == ' ')
                contador++;
            if(contador == (tamanho_palavra))
                ocorrencias++;

            contador = 0;
            k = 1;
       }
       if(j == i - tamanho_palavra - 1 )
             if(conteudo[j] == var_aux_maiuscula || conteudo[j] == var_aux_minuscula){
             aux_j = j+1;
             for (; aux_j < (j + tamanho_palavra); aux_j++) {
                if (palavra_chave[k] == conteudo[aux_j])
                    contador++;
                k++;
             }
             if(conteudo[j-1] == ' ')
                contador++;
             if(contador == (tamanho_palavra))
                ocorrencias++;

             contador = 0;
             k = 1;
             }

    }
    printf("'%s' ocorre %d vezes no arquivo '%s'",palavra_chave, ocorrencias, nome_arquivo);
    close(beta_leitura);
}

    bib_arqs.h:

void compara_palavras_arquivo(char *nome_arquivo, char *conteudo, char *palavra_chave);

